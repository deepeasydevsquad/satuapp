name: CI/CD Deploy Aplikasi Satu apps

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASS }}

      - name: Build and push client image
        run: |
          docker build -t muammar88/satuapp_saas_client:v1.0 ./client
          docker push muammar88/satuapp_saas_client:v1.0

      - name: Build and push backend image
        run: |
          docker build -t muammar88/satuapp_saas_server:v1.0 ./server
          docker push muammar88/satuapp_saas_server:v1.0

      - name: Deploy to Ubuntu server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.IP_SERVER_DATABASE_MACHINE }}
          username: ${{ secrets.SSH_USER_DATABASE_MACHINE }}
          key: ${{ secrets.SSH_PRIVATE_KEY_DATABASE_MACHINE }}
          script: |
            cd /home/dbmachine/satuapp

            # Pull latest images
            docker pull muammar88/satuapp_saas_client:v1.0
            docker pull muammar88/satuapp_saas_server:v1.0

            # Restart services
            docker-compose down
            docker-compose up -d --force-recreate

            echo "‚è≥ Waiting for MySQL to be ready..."
            until docker exec mysql_container_satuapp mysqladmin ping -uroot -p"root_password" --silent; do
              echo "   ... still waiting for MySQL"
              sleep 5
            done

            echo "‚è≥ Waiting for Container_server to be running..."
            until [ "$(docker inspect -f '{{.State.Running}}' Container_server)" == "true" ]; do
              echo "   ... still waiting for Container_server"
              sleep 5
            done

            echo "üóë Dropping and creating database..."
            docker exec -i mysql_container_satuapp mysql -uroot -p"root_password" -e "DROP DATABASE IF EXISTS satuapp_db; CREATE DATABASE satuapp_db;"

            echo "üìú Running Sequelize migrations..."
            if docker exec -i Container_server_satuapp npx sequelize-cli db:migrate; then
              echo "üå± Seeding database..."
              docker exec -i Container_server_satuapp npx sequelize-cli db:seed:all --debug
              echo "üîÑ Restarting Container_server..."
              docker restart Container_server_satuapp
            else
              echo "‚ö†Ô∏è Migration failed. Skipping seed."
            fi
